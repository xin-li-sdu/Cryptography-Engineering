import numpy as np
from tqdm import trange

# S盒，用于AES加密中的替代字节操作
sbox = [
    # 行号0
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    # 行号1
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    # 行号2
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    # 行号3
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    # 行号4
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    # 行号5
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    # 行号6
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    # 行号7
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    # 行号8
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    # 行号9
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    # 行号10
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    # 行号11
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    # 行号12
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    # 行号13
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    # 行号14
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    # 行号15
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

def aes_internal(inputdata, key):
    return sbox[inputdata ^ key]

# 计算每个数的汉明重量（二进制表示中1的个数）
HW = [bin(n).count("1") for n in range(0, 256)]

# 计算数组的均值
def mean(X):
    return np.mean(X, axis=0)

# 计算数组的标准差
def std_dev(X, X_bar):
    return np.sqrt(np.sum((X - X_bar) ** 2, axis=0))

def DPA(trace,textin_array):#差分功耗分析（DPA）攻击
    trace_mean=np.average(trace,axis=0)     # 计算跟踪平均值
    trace_omega= np.sqrt(np.sum((trace - trace_mean)**2,axis=0)) 
   # cpa_correlation=[0]*16
    bestguess=[0]*16     # 初始化相关性和最佳猜测数组
    for byte in trange(0,16): 
        m_array = [0] * 256
        for kguess in range(256):
            type1 = []
            type0 = []
            for line,textin in zip(trace,textin_array): 
             # 根据密钥猜测判断该跟踪属于类型1还是类型0
                if (aes_internal(textin[byte],kguess) & 0x80) == 0x80:
                    type1.append(line)
                else:
                    type0.append(line)
            type1_bar = mean(type1)
            type0_bar = mean(type0)
            mse = np.mean(np.square(type1_bar - type0_bar)) 
            m_array[kguess] = mse
        bestguess[byte] = np.argmax(m_array) # 找到最佳密钥猜测
    print("Best Key Guess:",end="")
    for b in bestguess: print("%02x " %b,end="")


if __name__ == '__main__':
    trace = np.load("AES_tracesPart0.npy")
    trace_sbox_position = trace[:, 3000:6000]
    textin_array = np.load("AES_textinPart0.npy")
    DPA(trace_sbox_position, textin_array)
